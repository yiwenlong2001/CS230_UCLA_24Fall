# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class cfg4Generator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def s(self, parent=None):
        with RuleContext(self, UnparserRule(name='s', parent=parent)) as current:
            UnlexerRule(src='a', parent=current)
            return current
    s.min_depth = 0

    def WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            return current
    WS.min_depth = 0

    _default_rule = s

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(9, 10), range(10, 11), range(13, 14), range(32, 33)])),
    }
